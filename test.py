# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YHZTrXL6jM8LGEWIRY4zkVjLKnvI9bKE

# 인코더 & 모델 : se_resnext101_32x4d & UnetPlusPlus

# 수강생분의 이름, 학번을 반영해주세요.
"""

id = '20171613  20191740  20191612  20177154'
name = '박재현  유선아  홍녕기  유창민'
print(id)
print(name)

"""## 필요 모듈 설치"""

#!pip uninstall -y segmentation-models-pytorch
!pip install pretrainedmodels==0.7.4
!pip install efficientnet_pytorch==0.6.3
!pip install timm==0.4.12
!pip install -U git+https://github.com/albu/albumentations --no-cache-dir

"""## 구글 드라이브 연동"""

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/gdrive')

workspace_path = '/gdrive/My Drive/Colab Notebooks/CV/SIA'
segmentation_path = os.path.join(workspace_path, 'segmentation_models')

import sys
sys.path.append(segmentation_path)  # segmentation 소스코드 경로 설정

# Validation DataSet 저장 경로
building_and_road_validation_path = os.path.join(workspace_path, 'LV2_dataset_edit/LV2_validation_set')
x_valid_dir = os.path.join(building_and_road_validation_path, 'images')
y_valid_dir = os.path.join(building_and_road_validation_path, 'labels/building_road')

# helper function for data visualization
def visualize(**images):
    """PLot images in one row."""
    n = len(images)
    plt.figure(figsize=(16, 5))
    for i, (name, image) in enumerate(images.items()):
        plt.subplot(1, n, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.title(' '.join(name.split('_')).title())
        plt.imshow(image)
    plt.show()

"""## 데이터로더 정의"""

from torch.utils.data import DataLoader
from torch.utils.data import Dataset as BaseDataset

class Dataset(BaseDataset):
    """CamVid Dataset. Read images, apply augmentation and preprocessing transformations.
    
    Args:
        images_dir (str): path to images folder
        masks_dir (str): path to segmentation masks folder
        class_values (list): values of classes to extract from segmentation mask
        augmentation (albumentations.Compose): data transfromation pipeline 
            (e.g. flip, scale, etc.)
        preprocessing (albumentations.Compose): data preprocessing 
            (e.g. noralization, shape manipulation, etc.)
    
    """
    
    CLASSES = ['building', 'road']
    
    def __init__(
            self, 
            images_dir, 
            masks_dir, 
            classes=None, 
            augmentation=None, 
            preprocessing=None,
    ):
        self.ids = os.listdir(images_dir)
        self.images_fps = [os.path.join(images_dir, image_id) for image_id in self.ids]
        self.masks_fps = [os.path.join(masks_dir, image_id) for image_id in self.ids]
        
        # convert str names to class values on masks
        self.class_values = [self.CLASSES.index(cls.lower()) for cls in classes]

        for i in range(len(self.masks_fps)):
          self.mask_ids = np.unique(cv2.imread(self.masks_fps[i], 0))[1:]
          if len(self.mask_ids) == len(self.class_values):
            break
        
        self.augmentation = augmentation
        self.preprocessing = preprocessing
    
    def __getitem__(self, i):
        
        # read data
        image = cv2.imread(self.images_fps[i])
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        mask = cv2.imread(self.masks_fps[i], 0)
        
        # extract certain classes from mask (e.g. cars)
        masks = [(mask == self.mask_ids[v]) for v in self.class_values]
        mask = np.stack(masks, axis=-1).astype('float')
        
        # apply augmentations
        if self.augmentation:
            sample = self.augmentation(image=image, mask=mask)
            image, mask = sample['image'], sample['mask']
        
        # apply preprocessing
        if self.preprocessing:
            sample = self.preprocessing(image=image, mask=mask)
            image, mask = sample['image'], sample['mask']
            
        return image, mask
        
    def __len__(self):
        return len(self.ids)

"""## 데이터증대"""

import albumentations as albu

def get_validation_augmentation():
    """Add paddings to make image shape divisible by 32"""
    test_transform = [
        albu.PadIfNeeded(384, 480)
    ]
    return albu.Compose(test_transform)


def to_tensor(x, **kwargs):
    return x.transpose(2, 0, 1).astype('float32')


def get_preprocessing(preprocessing_fn):
    """Construct preprocessing transform
    
    Args:
        preprocessing_fn (callbale): data normalization function 
            (can be specific for each pretrained neural network)
    Return:
        transform: albumentations.Compose
    
    """
    
    _transform = [
        albu.Lambda(image=preprocessing_fn),
        albu.Lambda(image=to_tensor, mask=to_tensor),
    ]
    return albu.Compose(_transform)

"""## 모델 검증"""

import torch
import numpy as np
import segmentation_models_pytorch as smp

import time

# 모델 저장 경로
save_dir = os.path.join(workspace_path, 'Models_Save')
best_model = torch.load(os.path.join(save_dir, 'best_model.pth'))

ENCODER = 'se_resnext101_32x4d'
ENCODER_WEIGHTS = 'imagenet'
CLASSES = ['building', 'road']
ACTIVATION = 'sigmoid'
DEVICE = 'cuda'
model = best_model

preprocessing_fn = smp.encoders.get_preprocessing_fn(ENCODER, ENCODER_WEIGHTS)

valid_dataset = Dataset(
    x_valid_dir, 
    y_valid_dir, 
    augmentation=get_validation_augmentation(), 
    preprocessing=get_preprocessing(preprocessing_fn),
    classes=CLASSES,
)

valid_loader = DataLoader(valid_dataset, batch_size=1, shuffle=False, num_workers=1)

loss = smp.utils.losses.DiceLoss()
metrics = [
    smp.utils.metrics.IoU(threshold=0.5),
]

optimizer = torch.optim.Adam([ 
    dict(params=model.parameters(), lr=0.0001),
])

valid_epoch = smp.utils.train.ValidEpoch(
    model, 
    loss=loss, 
    metrics=metrics, 
    device=DEVICE,
    verbose=True,
)

start = time.time()
valid_logs = valid_epoch.run(valid_loader)
end = time.time()

fps = (end - start) / 142

print("fps = " + str(fps))

"""## 이미지 시각화"""

valid_dataset_vis = Dataset(
    x_valid_dir, y_valid_dir, 
    classes=CLASSES,
)

for i in range(3):
    n = np.random.choice(len(valid_dataset))
    
    image_vis = valid_dataset_vis[n][0].astype('uint8')
    image, gt_mask = valid_dataset[n]
    
    gt_mask = gt_mask.squeeze()

    gt_mask = gt_mask[0,:,:] + gt_mask[1,:,:]    
    
    x_tensor = torch.from_numpy(image).to(DEVICE).unsqueeze(0)
    pr_mask = best_model.predict(x_tensor)
    pr_mask = (pr_mask.squeeze().cpu().numpy().round())

    pr_mask = pr_mask[0,:,:] + pr_mask[1,:,:]
    pr_mask = np.where(pr_mask == 2,1,pr_mask)
        
    visualize(
        image=image_vis, 
        ground_truth_mask=gt_mask, 
        predicted_mask=pr_mask
    )

